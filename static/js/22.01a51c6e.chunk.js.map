{"version":3,"file":"static/js/22.01a51c6e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","redux/contacts/phone-operations.js","components/Modal/Modal.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/Views/ContactsPage/ContactsPage.module.css?ea50","Views/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ripple\":\"Contact_ripple__5bVqw\",\"serchEl\":\"Contact_serchEl__iB-x1\",\"deletBtn\":\"Contact_deletBtn__z6G2-\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport s from './Contact.module.css';\r\n\r\nconst Contact = ({ name, number, deleteEl, id, editEl }) => {\r\n  return (\r\n    <div>\r\n      <ListGroup.Item className={s.serchEl}>\r\n        {name}: {number}\r\n        <Button\r\n          type=\"button\"\r\n          className={`${s.ripple} ${s.deletBtn}`}\r\n          onClick={() => deleteEl(id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"button\"\r\n          className={`${s.ripple} ${s.deletBtn}`}\r\n          onClick={() => editEl(id)}\r\n        >\r\n          Edit\r\n        </Button>\r\n      </ListGroup.Item>\r\n    </div>\r\n  );\r\n};\r\n\r\nContact.propType = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.number.isRequired,\r\n  deleteEl: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  editContactRequest,\r\n  editContactSuccess,\r\n  editContactError,\r\n} from './phone-actions';\r\n\r\n// GET @ /tasks\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\n// POST @ /tasks\r\nconst addContact = contacts => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contacts)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\n// DELETE @ /tasks/:id\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(editContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\n// edit @ /tasks/:id\r\nconst editContact =\r\n  ({ id, name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n      .patch(`/contacts/${id}`, contact)\r\n      .then(({ data }) => dispatch(editContactSuccess(data)))\r\n      .catch(error => dispatch(editContactError(error.message)));\r\n  };\r\n\r\nconst contactsOperations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n  editContact,\r\n};\r\nexport default contactsOperations;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport contactsOperations from 'redux/contacts/phone-operations';\r\n\r\nexport default function ShowModal({ show, handleClose, editableItem }) {\r\n  const [contact, setContact] = useState({\r\n    id: editableItem.id,\r\n    name: editableItem.name,\r\n    number: editableItem.number,\r\n  });\r\n  const arrayContact = useSelector(state => state.contacts);\r\n  const dispatch = useDispatch();\r\n  const editContact = data => dispatch(contactsOperations.editContact(data));\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setContact(prevState => ({\r\n          ...prevState,\r\n          [name]: value,\r\n        }));\r\n        break;\r\n\r\n      case 'number':\r\n        setContact(prevState => ({\r\n          ...prevState,\r\n          [name]: value,\r\n        }));\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleChangeSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const eventNameValue = contact.name;\r\n    const arrayContactNormalaise = arrayContact.contacts.map(e =>\r\n      e.name.toLowerCase().trim()\r\n    );\r\n\r\n    const filterName = arrayContactNormalaise.find(\r\n      e => e === eventNameValue.toLowerCase().trim()\r\n    );\r\n\r\n    filterName\r\n      ? alert(`${eventNameValue} is already in Contacts`)\r\n      : editContact(contact);\r\n\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit contact</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div /* className={s.searchForm} */>\r\n            <h2>Name</h2>\r\n            <input\r\n              /* className={s.name} */\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n              value={contact.name}\r\n              onChange={handleChange}\r\n            />\r\n\r\n            <h2>Number</h2>\r\n            <input\r\n              /* className={s.number} */\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n              value={contact.number}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Cencel\r\n          </Button>\r\n          <Button variant=\"primary\" type=\"submit\" onClick={handleChangeSubmit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"ContactList_List__o-BBH\"};","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport PropTypes from 'prop-types';\r\nimport Contact from 'components/Contact/Contact';\r\nimport contactsOperations from 'redux/contacts/phone-operations';\r\nimport ShowModal from 'components/Modal/Modal';\r\nimport s from '../ContactList/ContactList.module.css';\r\n\r\nconst getVisibleEl = (contacts = [], filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nexport default function ContactList() {\r\n  const [show, setShow] = useState(false);\r\n  const [editableItem, setEditableItem] = useState();\r\n  const handleShow = id => {\r\n    setShow(true);\r\n    const getItemForEdit = contactArrey.find(e => e.id === id);\r\n    setEditableItem(getItemForEdit);\r\n  };\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const contactArrey = useSelector(state =>\r\n    getVisibleEl(state.contacts.contacts, state.contacts.filter)\r\n  );\r\n\r\n  const deleteContact = id => dispatch(contactsOperations.deleteContact(id));\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <ListGroup className={s.List}>\r\n        {contactArrey.map(({ id, name, number }) => {\r\n          return (\r\n            <Contact\r\n              key={id}\r\n              id={id}\r\n              name={name}\r\n              number={number}\r\n              deleteEl={deleteContact}\r\n              editEl={handleShow}\r\n            />\r\n          );\r\n        })}\r\n      </ListGroup>\r\n      <div>\r\n        {show && (\r\n          <ShowModal\r\n            show={show}\r\n            handleClose={handleClose}\r\n            editableItem={editableItem}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactArrey: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBlock\":\"SearchForm_searchBlock__1TASg\",\"searchInput\":\"SearchForm_searchInput__+B7ky\",\"SearchForm\":\"SearchForm_SearchForm__XekxT\"};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport s from './SearchForm.module.css';\r\nimport actions from '../../redux/contacts/phone-actions';\r\n\r\nexport default function SearchForm() {\r\n  const value = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Form.Label htmlFor=\"inputPassword5\" className={s.SearchForm}>\r\n        Find Contacts by Name\r\n      </Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        id=\"inputPassword5\"\r\n        value={value}\r\n        aria-describedby=\"passwordHelpBlock\"\r\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\r\n      />\r\n      <Form.Text id=\"passwordHelpBlock\" muted>\r\n        Start typing to find contact you need\r\n      </Form.Text>\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"ContactForm_ContactForm__WW8Xl\"};","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport s from '../ContactForm/ContactForm.module.css';\r\n\r\nimport contactsOperations from 'redux/contacts/phone-operations';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const arrayContact = useSelector(state => state.contacts);\r\n\r\n  const dispatch = useDispatch();\r\n  const addContact = data => dispatch(contactsOperations.addContact(data));\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const eventNameValue = event.target[0].value;\r\n    const arrayContactNormalaise = arrayContact.contacts.map(e =>\r\n      e.name.toLowerCase().trim()\r\n    );\r\n\r\n    const filterName = arrayContactNormalaise.find(\r\n      e => e === eventNameValue.toLowerCase().trim()\r\n    );\r\n\r\n    filterName\r\n      ? alert(`${eventNameValue} is already in Contacts`)\r\n      : addContact({ name, number });\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} className={s.ContactForm}>\r\n      <div>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Text className=\"text-muted\">Please enter your name</Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Form.Label>Number</Form.Label>\r\n          <Form.Control\r\n            type=\"tel\"\r\n            placeholder=\"Enter phone number\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            Please enter your phone number\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Add contact\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nContactForm.propType = {\r\n  addContact: PropTypes.func.isRequired,\r\n  arrayContact: PropTypes.array.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ListName\":\"ContactsPage_ListName__GV41G\",\"Table\":\"ContactsPage_Table__nnHqK\"};","import Container from '../../components/Container/';\r\nimport ContactList from '../../components/ContactList/';\r\nimport SearchForm from '../../components/SearchForm/';\r\nimport ContactForm from '../../components/ContactForm/';\r\nimport s from '../ContactsPage/ContactsPage.module.css';\r\n\r\nexport default function ContactPage() {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <h1>Phonebook</h1>\r\n        <div className={s.Table}>\r\n          <div>\r\n            <h2 className={s.ListName}>Adding contacts</h2>\r\n            <ContactForm />\r\n          </div>\r\n          <div>\r\n            <h2 className={s.ListName}>Contacts list</h2>\r\n            <SearchForm />\r\n            <ContactList />\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Contact","name","number","deleteEl","id","editEl","ListGroup","className","s","Button","type","onClick","variant","propType","PropTypes","contactsOperations","fetchContacts","dispatch","fetchContactsRequest","axios","data","fetchContactsSuccess","fetchContactsError","message","addContact","contacts","addContactRequest","then","addContactSuccess","catch","error","addContactError","deleteContact","contactId","editContactRequest","deleteContactSuccess","deleteContactError","editContact","contact","deleteContactRequest","editContactSuccess","editContactError","ShowModal","show","handleClose","editableItem","useState","setContact","arrayContact","useSelector","state","useDispatch","handleChange","event","target","value","prevState","Modal","onHide","closeButton","pattern","title","required","onChange","preventDefault","eventNameValue","map","e","toLowerCase","trim","find","alert","ContactList","setShow","setEditableItem","handleShow","getItemForEdit","contactArrey","normalizedFilter","filter","includes","getVisibleEl","useEffect","SearchForm","Form","htmlFor","actions","muted","ContactForm","setName","setNumber","reset","onSubmit","controlId","placeholder","ContactPage","Container"],"sourceRoot":""}